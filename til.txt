프로그래밍할 때 파일/폴더명은 
1. 영어로, 특수문자 없이(띄어쓰기도 안돼요!) 만들어주세요. 단어를 연결할 때는 - 나 _ 둘 중 하나를 사용하도록 합시다! 컴퓨터가 다른 문자가 섞이면 잘 못 알아들을 수 있어요. 

2. 내용(데이터)를 제대로 나타내주는 이름을 지어주세요! 
파일/폴더에 담긴 내용은 곧 데이터입니다. 데이터를 제대로 관리하는 첫 걸음은 제대로 이름 붙여주는 것이에요. (예. 11111.txt 🙅 / project_list.txt, commit_practice.py 🙆‍♀️ )

예를 들면, 프로젝트 이름을 git-tutorial, taco-recipe, constitution-of-republic-of-korea 로 짓는 것처럼요! 

- 내가 기록할 작업 내역이 무엇인지 생각하고, 
- 관련된 파일만 add 해서 
- 작업내역을 나타내는 commit 메시지 적기!

- 정리하기
    - **버전관리를 한다는 것은** 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 commit 을 사용해서 버전이 달라지는 것을 관리합니다.
    - 컴퓨터에 있는 프로젝트를 Git 이 관리하는 프로젝트로 만들 수 있습니다. 앞으로 Git 으로 관리할꺼야! 하고 설정해주면 됩니다. 이 작업을 **git 초기화(git initialize)**한다고 표현합니다.
    - 현재 프로젝트의 상태를 찰칵 📸  저장하는 것을 **commit** 이라고 합니다.
    - commit 에는 아래를 포함합니다.
        - 누가(author), 언제 commit 했는지의 정보와 프로젝트 변경 내용
        - 작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지를 'commit 메시지'라고 합니다.
    - commit 에 반영할지 안할지는 파일 단위로 선택할 수 있습니다. commit 에 반영할 파일을 선택하는 것을 **add (혹은 staging, 스테이징)** 이라고 합니다.
    - commit 한 기록은 **history** 로 볼 수 있습니다.
    - 지금까지 우리가 한 작업은 'git 초기화하기(initialize) - add(staging) - commit' 입니다.
        - git 초기화는 처음에 단 한번만 해 주면 됩니다. 작업 내역을 저장하기 위해서는 **add - commit** 만 하면 됩니다.

1. 버전관리를 한다는 건 어떤 의미일까?
    - 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 누가, 언제, 해당 시점의 프로젝트 상태를 기록해두기 때문에 버전 관리가 가능합니다.
2. 작업내역 단위인 commit 에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까?
    - 누가, 언제, 무엇을 했는지가 필요하겠죠? 어떤 작업을 했는지 알려주는 작업 내역인 commit 메시지, 누가(author), commit 한 시간이 필요해요.
    - 그리고 commit 을 편하게 관리하기 위한 commit 아이디!  commit 아이디는 사용자 아이디처럼 commit 에 부여된 유일한 값!
3. 지금까지 우리가 실습은 어떤 순서로 했었지?
    - 기존의 프로젝트를 git 프로젝트로 만든다. - git 초기화(git initialize)
    - commit 할 파일들을 add(staging) 하고  commit 메시지 작성해서 commit!


Git과 초면인 여러분들을 위한 팁! 
혼자 Git 프로젝트 작업을 할 때는 pull -> 로컬 repo commit -> push  순서로 하면 좋아요. 































- 총 정리 개념
    - **버전 관리:** 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 가장 널리 쓰이는 버전관리 도구 중에 하나로 commit 을 사용해서 버전이 달라지는 것을 관리합니다.
    - **git 초기화(git initialize) :** 컴퓨터에 있는 프로젝트를 Git 이 관리하는 프로젝트로 만들 수 있습니다. 앞으로 Git 으로 관리할꺼야! 하고 설정해주면 됩니다. 이 작업을 한다고 표현합니다.
    - **commit  :** 현재 프로젝트의 상태를 찰칵 📸  저장하는 것을 이라고 합니다.
        - 누가(author), 언제 commit 했는지의 정보와 프로젝트 변경 내용
        - 작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지를 'commit 메시지'라고 합니다.

add (혹은 staging, 스테이징) : commit 에 반영할지 안할지는 파일 단위로 선택할 수 있습니다. commit 에 반영할 파일을 선택하는 것

- 지금까지 우리가 한 작업은 'git 초기화하기(initialize) - add(staging) - commit' 입니다.
    - git 초기화는 처음에 단 한번만 해 주면 됩니다. 작업 내역을 저장하기 위해서는 **add - commit** 만 하면 됩니다.
- **repo :** 'Git으로 관리되는 프로젝트' 를 Git 에서는 **repo(리포**, repository 리포지토리의 약자) 라고 부릅니다. 내 컴퓨터에 저장되어있는 리포지토리를 **로컬 repo**(local repository) 라고 합니다. Github 처럼 다른 곳에서 접속할 수 있는 공간에 저장되어있는 것을 **원격 repo**(remote repository) 라고 합니다.
- Tracking(추적) : 로컬 repo 와 원격 repo 를 연결한다!

- push : 로컬 repo 의 commit 들을 원격 repo 에 반영하기(push)! 밀어넣기. 원격 repo 에 없는 즉,새로운 commit 내역을 모두 원격 repo 에 한 번에 반영합니다.
- pull : 원격 repo 의 commit 들을 로컬 repo 로 반영하기(pull)! 땡겨오기. 로컬 repo 에 없는 즉,새로운 commit 내역을 모두 로컬 repo 에 한 번에 반영합니다.

clone : 원격 repo 를 내 컴퓨터에 가져와서 초기 repo 세팅하는 것을 clone(복제하기)! 





