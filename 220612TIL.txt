노마드코더 코코아톡 클론 코딩 강의

#4.1 Transitions part Two

transition 은 상태에 따라 바귀는 요소가 있을때 사용함
상태 ex) hover, active, focus ...
ease-in function : 브라우저에게 변화하는 방법을 알려주는 역할
ㄴlinear - 변화 그래프가 직선
ㄴease-in - 시작과 끝이 빠름
ㄴease-out - 시작과 끝이 느림
ㄴease-in-out - 시작이 빠르고 끝이 느림
all : 변화 요소를 한번에 다룬다.
ㄴ따로 다루고 싶으면 각각 써주면 됨

cubic-bezier(0, 0, 0, 0); 으로 직접 설정할수도 있다.

#4.2 Transformations

transformation

한 요소를 말 그대로 변형시킬수 있기 때문에 개쩐다
css로 3D까지 할수 있기 때문에 cool한것임
transform 안에 엄청나게 많은 기능들이 있다

transformation은 box element를 변형시키지 않는다.
즉, 옆에 sibling들에게 영향을 끼치지 않는다.
margin, padding이 적용되지 않는다. 일종의 3D transformation이기 때문이다.
margin이나 padding을 주기위해서 tarnslateX, trnasLateY 를 사용하는것이 아니다!
다른 요소의 box를 변형시키지 않고 원하는 요소를 이동시키기 위해서 사용하는 것이다.
trransformation 은 페이지의 픽셀의 다른 부분에서 일어난다.
transformatino은 box차원에서 일어나지 않는다.
tronsformation 을 결합 가능하다!
CSS의 3D는 GPU로 돌아간다 즉 3D작업을 할 수 있다
transformation 은 이것 역시 엄청나게 많은 document가 있다 확인해서 combine할 수 있다
transition 과 transformation 을 합친다면 아름다운 애니매이션을 만들 수 있다

#4.3 Animations part One

애니메이션 만들기
@keyframes 애니메이션 이름 {
from{
}
to {
}
}
사용하기
img {
animation : 애니메이션 이름 재생시간 옵션
}
무한으로 반복되게 하려면 뒤에 infinite를 붙여준다.

#4.4 Animations part Two
- from to 말고, 1,2,3,4,5...10 혹은 0% 25% 50% 75% 100% 같이 여러 단계로 나뉘어 애니매이션을 만들 수 있다.
- 다른 property들도 애니매이션으로 만들 수 있다. 꼭 transform만 써야하는 건 아니지만, transform을 쓰는걸 권한다. 일부 property는 애니매이션이 잘 안되기 때문이다.

#4.5 Media Queries 

- Media query는 오직 CSS만을 이용해서 스크린의 사이즈를 알 수 있는 방법이다.(웹사이트를 보고 있는 사용자의 스크린 사이즈)
- @media screen and (max-width: 00px) {} 을 이용하여 몇 픽셀부터는 달라보이도록 만들 수 있다. 이를 통해 스크린의 사이즈를 알 수 있다.
- min 사이즈와 max사이즈를 조절하여 단계별로 만들면, 스크린 사이즈의 범위를 알 수 있다.
- 브라우저에서 inspect의 device toolbar를 이용하여 핸드폰 기종 별 사이즈로 브라우저를 볼 수 있다.
- media screen에 (orientation: landscape)를 이용하면, 세로모드인지 가로모드인지도 구별 할 수 있다.
 screen and (min-width: npx) and (max-width:npx) and (orientation : landscape혹은portrait) => 스크린 사이즈에 따라서 property 조정 가능함. orientation으로 가로 세로 감지 가능

#4.6 Media Queries Recap 

Media Queries 주요기능
- min-device-width
- max-device-width
- orientation: landscape
- orientation: portrait
- aspect-ration - 레티나디스플레이 감지가능
- display-mode
- inverted-colors
- lightlevel
- prefers-contrast
- resolution
- monochrome

Media type
- @media screen{}
- @media print{}

- @media query는 코드의 조건을 추가 할 수 있는 방법이다.
- media query도 {} 중괄호로 여닫는다.
→ 그 안에 element에 속성을 적용시켜야 한다.
- media query는 "and"를 써서 연결된다.
- "min-width" 뿐만 아니라, "min-device-width"도 있다.
→ -device-width는 오직 핸드폰에만 적용된다.
- @media print를 이용하면 브라우저 프린트 화면에서의 속성을 변경할 수 있다.

두잇 웹개발 표준 html 부분

6강 css의 기본

두잇 자바스크립트
3-3 연산자 이해하기
산술연산자 : +,-,*,/,%
++ 변수값을 1만큼 증가시킴
-- 변숫값을 1만큼 감소시킴

3-4 연산자 깊게 알아보기
할당 연산자(=)
ex) const x = 10
x += 10          이걸 풀어서 쓰면 x = x+10
할당연산자 응용	예	의미
+=	y += x	y= y+x
-=	y -= x	y= y-x
*=	y *= x	y= y*x
/=	y /= x	y= y/x
%=	y %= x	y= y%x
곱하거나 나누거나 나머지를 구할때는 문자형 자료를 모두 숫자로 자동 인식함
ex) const a = 100
const b = "50"
a * b = 5000
a / b = 2
a % b = 0

== 와 != 연산자 (비교연산자)
ex)
const a = 3, b = 4;
a == b
false
b != 6
true

== 연산자와 === 연산자
ex)
10 == "10"
true
10 === "10"
false

==연산자는 문자형 자료와 숫자형 자료가 있을 때 자동으로 자료형을 변환하여 비교함.
===연산자는 두 자료형의 변환을 허용 안함.



논리 연산자
OR 연산자 : 표시는 || 왼쪽과 오른쪽 중 하나만 참이면 true 반환
AND 연산자 : 표시는 && 왼쪽과 오른쪽 중 둘 다 참이여야 true, 하나라도 틀리면 false 반환
NOT 연산자 : 표시는 ! true나false를 반대로 뒤집음




